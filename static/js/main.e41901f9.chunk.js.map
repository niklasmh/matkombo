{"version":3,"sources":["combinations.js","App.js","serviceWorker.js","index.js"],"names":["foodCombinations","split","filter","line","trim","map","combo","comment","parsedCombo","f","description","tags","firebaseConfig","reduce","acc","n","e","includes","sort","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","appContainer","useRef","className","ref","fallback","traceId","Lists","container","useState","setCombo","foodLists","setFoodLists","foodComboLists","setFoodComboLists","filters","setFilters","combosRef","useFirestore","collection","combos","useFirestoreCollectionData","idField","addCombination","doc","join","toLowerCase","set","merge","useEffect","foods","c","length","selected","i","key","placeholder","value","onChange","slice","target","onClick","content","tag","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","downloadDatabaseContent","food","indexOf","availableFoodCombinations","fc","some","setTimeout","current","scrollLeft","scrollWidth","ex","FoodItem","level","foodComboList","answer","window","prompt","comboItems","comboItem","find","existsMore","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e41901f9.chunk.js","sourcesContent":["// Navn må være i entall (med mindre det blir veldig rart)\nexport const foodCombinations = `\nappelsin + røbeter\navokado + kakao\navokado + sjokolade\navokado + vanilje\nbacon + banan\nbanan + peanøtt\nbanan + sesam\nbacon + sjokolade\nblåmuggost + daddel\ncola + kylling\ndruer + salami\neddik (sherry) + oliven (svart) + paprika (røkt)\neple (saus) + kylling\nfetaost + kylling + villris\nfisk + mango\ngulrot + sukker\ngulrot + honning\ngurkemeie + ris\nkirsebær + kylling\nkylling + peanøtt\nkylling + vaffel = Veldig godt!\nlaks + pesto\nlapskaus + pølse\nlapskaus + tyttebærsyltetøy\nlapskaus + pølse + tyttebærsyltetøy\nlapskaus + bringebærsyltetøy\nlapskaus + fetaost\nfiskepinner + pommes frites\nfiskepinner + gulrot + potet\nfiskepinner + gulrot + potet + smør = Yumm\nfiskepinner + potet + smør\nnutella + ost (myk)\nsalat + limesaft\nsalat + sitronsaft\nost + sjokolade\ntomat + basilikum\nrøbeter + geiteost\ngulrot + spisskum\nblomkål + krydder\nblomkål + ost\nbrokkoli + sitron\nerter + minte\npotet + rosmarin\npotet + hvitløk\npotet + persille\nkål + bacon\nkål + ost\navokado + chilli\navokado + bacon\nsopp + hvitløk\nsopp + timian\nauberine + tomat\nauberine + olivenolje\nasparges + egg\npersille + minte\nlime + chilli\nfisk + sitron\nskalldyr + sitron\nfisk + lime\nskalldyr + lime\nfisk + fennikel\nfisk + dill\nfisk + chilli + soya + ingefær\nfisk + chips + eddik\nsalmon + røbet\nfisk + kapers\nfisk + safran\nfisk + hvitvin\nkjøtt + potet\nbiff + pepperot\nbiff + sennep\nbiff + kaffe\nbiff + blåmuggost\nkylling + peanøtt\nkylling + aprikos\nkylling + hvitløk\nsvin + fennikel\nsvin + eple\nlam + rosmarin\nlam + artisjokk\nlam + minte\nkjøttpai + ketchup\nbacon + egg\nand + appelsin\nskinke + ost\nskinke + chutney + ost\nblåmuggost + pære\nost + løk\nost + potet\nost + quince paste\nost + gressløk\ngeiteost + basilikum\nrømme + gressløk\nricotta + salami\nost + sopp\neple + kanel\nsjokolade + hasselnøtt\nsjokolade + chilli\nsjokolade + kaffe\nhonning + mandel\nvanilje + egg\nvanilje + krem\njordbær + krem\npære + bønner + bacon\nappelsin + mandel\nsjokolade + squash\nananas + minte = Sjukt #insane #nam\nbjørnebær + eple\nleverpostei + sylteagurk\nleverpostei + sennep\nmakrell i tomat + agurk\nbrødskive + ost + jordbærsyltetøy\nbrødskive + ost + bringebærsyltetøy\nbrødskive + ost + syltetøy\nbrødskive + ost + ketchup\nbrødskive + brunost + sirup\nbrødskive + brunost + jordbærsyltetøy\nbrødskive + brunost + bringebærsyltetøy\nbrødskive + brunost + syltetøy\nbrødskive + brunost + syltetøy + banan\nbrødskive + brunost + leverpostei = #rart\nbrødskive + sjokolade + ost = Norwegia og sjokade\nbrødskive + peanøttsmør + appelsinmarmelade\nbrødskive + tomat + majones\nbrødskive + rømme + syltetøy\nbrødskive + kaviar + majones\nbrødskive + kaviar + banan\nbrødskive + kaviar + banan + chili-saus\npølse + vaffel\npølse + rekesalat\nhavregrøt + syltetøy\nhavregrøt + syltetøy + rosiner\nmais + kesam\nspeltlumpe + skyr\nriskaker + smørost + salt\npotetstappe + tomatsuppe\npotetstappe + tomatsuppe + makaroni\npopkorn + sjokolade\nmakaroni + kanel + sukker\nbrunost + ost + salt = Rull sammen\nagurk + aromat\nkrem + kanel\ntaco + brokkoli\ntaco + banan\npannekaker + ketchup\npommes frites + is = Dyppe pommes frites ned i is\nbrokkoli + kaviar\nlaks + kaviar\nvaffel + kylling (fritert)\nbrus + peanøtter\ncola + is = Is oppi Cola\nnudler + rømme\nmakrell i tomat + ris + agurk + banan\nvaffel + laks\n`\n  .split(\"\\n\")\n  .filter((line) => !!line.trim())\n  .map((line) => {\n    const [combo, comment] = line.split(\"=\");\n    const parsedCombo = combo.split(\"+\").map((f) => f.trim());\n    if (comment) {\n      const [description, ...tags] = comment.split(\" #\").map((f) => f.trim());\n      return [{ description, tags }, ...parsedCombo];\n    }\n    return [{}, ...parsedCombo];\n  });\n\nexport const foods = foodCombinations\n  .reduce(\n    (acc, n) => [\n      ...acc,\n      ...n.filter((e) => typeof e === \"string\" && !acc.includes(e)),\n    ],\n    []\n  )\n  .sort();\n","import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  FirebaseAppProvider,\n  useFirestoreCollectionData,\n  useFirestore,\n  SuspenseWithPerf,\n} from \"reactfire\";\nimport \"./App.css\";\nimport { foodCombinations as foodCombinationsLocal } from \"./combinations\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBPXNPvR_quFgYLxwf3pPnvv_8PqTTQFLo\",\n  authDomain: \"matkomboapp.firebaseapp.com\",\n  databaseURL: \"https://matkomboapp.firebaseio.com\",\n  projectId: \"matkomboapp\",\n  storageBucket: \"matkomboapp.appspot.com\",\n  messagingSenderId: \"354610688205\",\n  appId: \"1:354610688205:web:196e74f763a2f9f9a2b984\",\n  measurementId: \"G-PM9FLJS69L\",\n};\n\nfunction App() {\n  const appContainer = useRef(null);\n\n  return (\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n      <div className=\"App\" ref={appContainer}>\n        <h1 className=\"Title\">Matkombo</h1>\n        <SuspenseWithPerf\n          fallback={\n            <div className=\"Lists\">\n              <div className=\"Level\">Henter matkombinasjoner ...</div>\n            </div>\n          }\n          traceId={\"load-combo-list\"}\n        >\n          <Lists container={appContainer} />\n        </SuspenseWithPerf>\n      </div>\n    </FirebaseAppProvider>\n  );\n}\n\nexport default App;\n\nfunction Lists({ container }) {\n  const [combo, setCombo] = useState([]);\n  const [foodLists, setFoodLists] = useState([]);\n  const [foodComboLists, setFoodComboLists] = useState([]);\n  const [filters, setFilters] = useState([\"\"]);\n\n  const combosRef = useFirestore().collection(\"combos\");\n  const combos = useFirestoreCollectionData(combosRef, { idField: \"combo\" });\n\n  useEffect(() => {\n    const foodCombinations = combos.map(\n      ({ combo, description = \"\", tags = \"\" }) => [\n        { description, tags: tags.split(\" \").filter((e) => !!e) },\n        ...combo.split(\"+\").map((e) => e.trim()),\n      ]\n    );\n    const foods = foodCombinations\n      .reduce(\n        (acc, n) => [\n          ...acc,\n          ...n.filter((e) => typeof e === \"string\" && !acc.includes(e)),\n        ],\n        []\n      )\n      .sort();\n\n    setFoodComboLists([foodCombinations]);\n    setFoodLists([foods]);\n  }, [combos]);\n\n  function addCombination(combo, description = \"\", tags = \"\") {\n    combosRef.doc(combo.sort().join(\" + \").toLowerCase()).set(\n      {\n        ...(description && { description }),\n        ...(tags && { tags }),\n      },\n      { merge: true }\n    );\n  }\n\n  // eslint-disable-next-line\n  function updateDatabaseWithLocal() {\n    foodCombinationsLocal.forEach(\n      ([{ description = \"\", tags = [] }, ...comb]) => {\n        addCombination(comb, description, tags.join(\" \"));\n      }\n    );\n  }\n\n  function downloadDatabaseContent() {\n    const content = foodComboLists[0]\n      .map(\n        ([{ description = \"\", tags = [] }, ...combo]) =>\n          combo.join(\" + \") +\n          (description || tags.length\n            ? \" = \" + description + tags.map((tag) => \" #\" + tag).join(\"\")\n            : \"\")\n      )\n      .join(\"\\n\");\n    var element = document.createElement(\"a\");\n    element.setAttribute(\n      \"href\",\n      \"data:text/plain;charset=utf-8,\" + encodeURIComponent(content)\n    );\n    element.setAttribute(\"download\", \"matkombo.txt\");\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  return (\n    <>\n      <h2 className=\"Combo\">\n        {combo.map((c) => `\"${c}\"`).join(\" og \") +\n          (combo.length === 1 ? \" og ...\" : \"\")}\n      </h2>\n      <div className=\"Lists\">\n        {[...combo, \"all\"].map((selected, i) => {\n          return foodLists.length > i ? (\n            <div key={i} className=\"Level\">\n              <div className=\"InputContainer\">\n                <input\n                  placeholder=\"Filtrer ...\"\n                  value={filters[i]}\n                  onChange={(e) =>\n                    setFilters([\n                      ...filters.slice(0, i),\n                      e.target.value || \"\",\n                      ...filters.slice(i + 1),\n                    ])\n                  }\n                />\n                <button\n                  className={\"Reset\" + (filters[i] ? \"\" : \" hidden\")}\n                  onClick={() => {\n                    setFilters([\n                      ...filters.slice(0, i),\n                      \"\",\n                      ...filters.slice(i + 1),\n                    ]);\n                    downloadDatabaseContent();\n                    //updateDatabaseWithLocal();\n                  }}\n                >\n                  ×\n                </button>\n              </div>\n              <div className=\"List\">\n                {foodLists[i]\n                  .filter(\n                    (food) => food.indexOf(filters[i].toLowerCase()) !== -1\n                  )\n                  .map((food) => (\n                    <div\n                      className={\n                        \"Item\" + (food === combo[i] ? \" selected\" : \"\")\n                      }\n                      key={food}\n                      onClick={() => {\n                        setCombo([...combo.slice(0, i), food]);\n                        setFilters([...filters.slice(0, i + 1), \"\"]);\n                        const availableFoodCombinations = foodComboLists[\n                          i\n                        ].filter((fc) => fc.includes(food));\n                        setFoodComboLists([\n                          ...foodComboLists.slice(0, i + 1),\n                          availableFoodCombinations,\n                        ]);\n                        setFoodLists([\n                          ...foodLists.slice(0, i + 1),\n                          foodLists[i].filter(\n                            (f) =>\n                              f !== food &&\n                              availableFoodCombinations.some((fc) =>\n                                fc.includes(f)\n                              )\n                          ),\n                        ]);\n                        setTimeout(() => {\n                          try {\n                            if (container.current)\n                              container.current.scrollLeft =\n                                container.current.scrollWidth;\n                          } catch (ex) {}\n                        }, 10);\n                      }}\n                    >\n                      <FoodItem\n                        level={i}\n                        food={food}\n                        foodComboList={foodComboLists[i]}\n                      />\n                    </div>\n                  ))}\n                {i > 0 ? (\n                  <div\n                    className=\"Item AddItem\"\n                    onClick={() => {\n                      if (filters[i]) {\n                        addCombination([...combo, filters[i]]);\n                      } else {\n                        const answer = window.prompt(\n                          `Sett navn på mat som du mener kan kombineres med ${combo.join(\n                            \" og \"\n                          )}`\n                        );\n                        if (answer) addCombination([...combo, answer]);\n                      }\n                    }}\n                  >\n                    + Legg til{\" \"}\n                    {filters[i]\n                      ? `\"${filters[i].toLowerCase()}\"`\n                      : \"en ny kombinasjon\"}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          ) : null;\n        })}\n      </div>\n    </>\n  );\n}\n\nfunction FoodItem({ level, food, foodComboList }) {\n  if (level === 0) {\n    return <span className=\"more\">{food}</span>;\n  } else {\n    const comboItems = foodComboList.filter((fc) => fc.includes(food));\n    const comboItem = comboItems.find((c) => c.length - 2 === level);\n    const existsMore = comboItems.some((c) => c.length - 2 > level);\n    if (comboItem) {\n      if (typeof comboItem[0] === \"object\") {\n        return (\n          <>\n            <span className={existsMore ? \"more\" : \"\"}>{food}</span>\n            <span className=\"Description\">\n              {comboItem[0].description ? (\n                <>\n                  {comboItem[0].description}\n                  <br />\n                </>\n              ) : null}\n              {(comboItem[0].tags || []).map((tag) => (\n                <span key={tag} className=\"Tag\">\n                  {tag}\n                </span>\n              ))}\n            </span>\n          </>\n        );\n      }\n      return <span className={existsMore ? \"more\" : \"\"}>{food}</span>;\n    }\n    return <span className={existsMore ? \"more\" : \"\"}>{food}</span>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}